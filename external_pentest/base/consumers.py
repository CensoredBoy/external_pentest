import json
import time
from asgiref.sync import async_to_sync
from channels.generic.websocket import AsyncWebsocketConsumer
from channels.db import database_sync_to_async


class LoadingConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.scan_id = self.scope["url_route"]["kwargs"]["scan_id"]
        self.scan_loading_group_name = f'scan_loading_group_name_{self.scan_id}'
        print(self.scan_loading_group_name)

        await self.channel_layer.group_add(self.scan_loading_group_name, self.channel_name)
        await self.accept()

    async def disconnect(self, close_code):
        await self.channel_layer.group_discard(self.scan_loading_group_name, self.channel_name)

    async def scan_done(self, event):
        status = event["status"]
        print("SSSSS")
        await self.send(text_data=json.dumps({"status": status}))

    async def scan_error(self, event):
        message = event["message"]
        status = event["status"]
        await self.send(text_data=json.dumps({"status":status,"message": message}))
