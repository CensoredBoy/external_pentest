from django.shortcuts import render, redirect
from django.http import HttpResponse, JsonResponse
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from .forms import DomainForm
from .models import Scan, IP, Domain, Port, MailReport
from base.background_tasks import osint
from celery.result import AsyncResult
from django.views.decorators.csrf import csrf_exempt

@login_required
def main(request):
    if request.method == 'POST':
        form = DomainForm(request.POST)
        if form.is_valid():
            scan = Scan(user=request.user, name=form.cleaned_data['name'], main_domain=form.cleaned_data['domain'])
            scan.save()
    else:
        form = DomainForm()
    scans = Scan.objects.filter(user = request.user).order_by('-pk')
    context = {
        'form':form,
        'scans':scans
    }
    return render(request, 'main.html', context)

@login_required
def scan(request, scan_id):
    scan = Scan.objects.get(pk=scan_id)
    if scan.done == 0:
        scan.done = 1
        scan.save()
        task = osint.delay(scan_id)

    scan_domains = Domain.objects.filter(scan=scan)
    domains_ips = {}
    for scan_domain in scan_domains:
        domains_ips[scan_domain] = IP.objects.filter(ip_domain = scan_domain)
    ips = IP.objects.filter(scan = scan)
    reports = MailReport.objects.filter(scan=scan)
    ports = {}
    for ip in ips:
        ports[ip] = Port.objects.filter(ip = ip)
    context = {
        'scan':scan,
        'domains_ips':domains_ips,
        'ports': ports,
        'reports':reports
    }
    return render(request, 'scan.html', context)


