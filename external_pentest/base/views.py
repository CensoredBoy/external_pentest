from django.shortcuts import render, redirect
from django.http import HttpResponse
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from .forms import DomainForm
from .models import Scan, IP, Domain, Port
from .Rpc.rpc_client import SubDomainRpcClient
import pydig
import re
import nmap

@login_required
def main(request):
    if request.method == 'POST':
        form = DomainForm(request.POST)
        if form.is_valid():
            scan = Scan(user=request.user, name=form.cleaned_data['name'], main_domain=form.cleaned_data['domain'])
            scan.save()
    else:
        form = DomainForm()
    scans = Scan.objects.filter(user = request.user).order_by('-pk')
    context = {
        'form':form,
        'scans':scans
    }
    return render(request, 'main.html', context)

@login_required
def scan(request, scan_id):
    scan = Scan.objects.get(pk=scan_id)
    if not scan.done:
        r = re.compile('^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$')
        subdomains_collector = SubDomainRpcClient()
        subdomains = subdomains_collector.call(scan.main_domain)
        subdomains = subdomains.decode('utf8').split('\n')[:-1]
        nm = nmap.PortScanner()
        for subdomain in subdomains:
            scan_domain = Domain(domain=subdomain, scan=scan)
            scan_domain.save()

            subdomain_ips = pydig.query(subdomain, 'A')
            for subdomain_ip in subdomain_ips:
                if bool(r.match(subdomain_ip)):
                    scan_domain_ip = IP(ip = subdomain_ip, t = 'A', ip_domain=scan_domain, scan=scan)
                    scan_domain_ip.save()
                    res = nm.scan(scan_domain_ip.ip, arguments="--top-ports 1 -sV")
                    if res['nmap']['scanstats']['downhosts'] == '0':
                        scan_domain_ip.state = nm[scan_domain_ip.ip].state()
                        scan_domain_ip.save()
                        for protocol in nm[scan_domain_ip.ip].all_protocols():
                            for port in nm[scan_domain_ip.ip][protocol].keys():
                                name = nm[scan_domain_ip.ip][protocol][port]['name']
                                product = nm[scan_domain_ip.ip][protocol][port]['product']
                                version = nm[scan_domain_ip.ip][protocol][port]['version']
                                proto = Port(ip=scan_domain_ip, port=port, name=name, product=product, version=version, protocol=protocol)
                                proto.save()
                    else:
                        scan_domain_ip.state = 'down'
                        scan_domain_ip.save()
            
        scan.done = True
        scan.save()
    scan_domains = Domain.objects.filter(scan=scan)
    domains_ips = {}
    for scan_domain in scan_domains:
        domains_ips[scan_domain] = IP.objects.filter(ip_domain = scan_domain)
    ips = IP.objects.filter(scan = scan)
    ports = {}
    for ip in ips:
        ports[ip] = Port.objects.filter(ip = ip)
    print(ports)
    context = {
        'scan':scan,
        'domains_ips':domains_ips,
        'ports': ports
    }
    return render(request, 'scan.html', context)