import time
import asyncio

async def wait_until(somepredicate, timeout, period=0.25, *args, **kwargs):
    mustend = time.time() + timeout
    while time.time() < mustend:
        if somepredicate(*args, **kwargs): return True
            time.sleep(period)
    return False


class Waiter():

    def __init__(self, init_value):
        self.scan = init_value
        self.var_mutex = threading.Lock()
        self.var_event = threading.Event()

    async def WaitUntil(self, v):
        while True:
            self.var_mutex.acquire()
            if self.scan.done() == v:
                self.var_mutex.release()
                return True
            self.var_mutex.release()
            self.var_event.wait(1) # Wait 1 sec

    def Set(self, v):
        self.var_mutex.acquire()
        self.scan = v
        self.var_mutex.release()
        self.var_event.set() # In case someone is waiting
        self.var_event.clear()