#!/usr/bin/env python3

# pip3 install dateparser xlsxwriter user_agents

import os

import json
import argparse
import csv
from datetime import datetime

import dateparser
import xlsxwriter
from user_agents import parse as parse_ua

#######################################################################################################################

victims = {}

#######################################################################################################################
def get_ip(data):
    return json.loads(data)['browser']['address']

#######################################################################################################################
def sort_victims():

    users_submitted = []
    users_clicked = []
    users_clever = []
    
    for key, value in victims.items():
    
        if value['count_attempts'] is 0 and value['clicked']:
            users_clicked.append(key)
        elif value['count_attempts'] != 0:
            users_submitted.append(key)
        else:
            users_clever.append(key)
    
    return users_submitted, users_clicked, users_clever

#######################################################################################################################
def search_username_key(qualifiers):

    try:
        qualifier = (key for key in (args.login if args.login else ["username", "login", "name", "user", "usr"]) if key in qualifiers)
        return next(qualifier)
    except StopIteration:
        # No appropriate qualifiers found
        raise Exception('Логин не найден в полученных данных')

#######################################################################################################################
def search_password_key(qualifiers):

    try:
        qualifier = (key for key in (args.password if args.password else ["password", "pass", "pwd"]) if key in qualifiers)
        return next(qualifier)
    except StopIteration:
        # No appropriate qualifiers found
        return ""

#######################################################################################################################
def parse_creds(email, date, event_type, data):
    
    json_data = json.loads(data)
    device = str(parse_ua(json_data['browser']['user-agent']))

    if event_type == 'Clicked Link':

        if victims[email]['first_click'] is None:
            victims[email].update({'clicked': True, 'ip': get_ip(data), 'browser': device, 'first_click': dateparser.parse(date)})

    elif event_type == 'Submitted Data':
    
        if victims[email]['first_submit'] is None:
            victims[email]['first_submit'] = dateparser.parse(date)
        
        username = json_data["payload"][search_username_key(json_data['payload'].keys())][0]

        victims[email]['logins'].add(username.strip())
        victims[email]['count_attempts'] += 1

        password_key = search_password_key(json_data['payload'])
        if password_key is not '':

            password = json_data['payload'][password_key][0]
            victims[email]['passwords'].add(password.strip())
    
    else:
        raise Exception(f'Unknown event type: {event_type}')

#######################################################################################################################
def write_xlsx(campaign_start_date):

    report_path = os.path.normpath(os.path.join(os.getcwd(), './reports/parsed_report_({}).xlsx'.format(datetime.now().strftime("%Y.%m.%d_%H-%M-%S"))))
    if not os.path.exists(os.path.dirname(report_path)):
        os.makedirs(os.path.dirname(report_path))

    workbook = xlsxwriter.Workbook(report_path)
    worksheet = workbook.add_worksheet('Персонифицированая статистика')
    row_num = 1

    worksheet.write_row('A' + str(row_num), [
        'Email',
        'Был совершён переход по ссылке',
        'Момент первого перехода по ссылке',
        'IP-адрес сотрудника в момент перехода по ссылке',
        'Были введены учётные данные',
        'Момент первого ввода данных',
        'Количество попыток ввода данных',
        'Введённые логины',
        'Введённые пароли',
        'Замаскированые пароли',
        'Использованное ПО'
    ])

    row_num += 1
    users_submitted, users_clicked, users_clever = sort_victims()

    for email in users_submitted + users_clicked + users_clever:

        victim = victims[email]
        victim['logins'].discard("")    # discard empty logins
        victim['passwords'].discard("") # discard empty passwords

        worksheet.write_row('A' + str(row_num), [
            email,
            'Да' if victim['clicked'] != 0 else 'Нет',
            '' if victim['first_click'] is None else victim['first_click'].strftime("%Y.%m.%d_%H-%M-%S"),
            victim['ip'] or '',
            'Да' if victim['count_attempts'] != 0 else 'Нет',
            '' if victim['first_submit'] is None else victim['first_submit'].strftime("%Y.%m.%d_%H-%M-%S"),
            victim['count_attempts'],
            '\n'.join(victim['logins']),
            '\n'.join(victim['passwords'] if not args.masked_only else []),
            '\n'.join([pwd[:2] + "***" + pwd[-2:] for pwd in victim['passwords']]),
            victim['browser'] or ''
        ])
        row_num += 1

    common_statistics = workbook.add_worksheet('Общая статистика')
    common_statistics.write_string('D1', 'Общая статистика')
    common_statistics.write_row('A2', [
        'Количество сотрудников',
        'Количество сотрудников, перешедших по ссылке, но не вводивших данные',
        'Количество сотрудников, которые ввели учетные данные',
        'Время старта фишинговой рассылки',
        'Время сбора статистики фишинговой рассылки'
    ])
    common_statistics.write_row('A3', [
        len(victims),
        '{} ({:.2f}%)'.format((len(users_clicked) - len(users_submitted)), (len(users_clicked) - len(users_submitted)) * 100 // len(victims)),
        '{} ({:.2f}%)'.format(len(users_submitted), len(users_submitted) * 100 // len(victims)),
        campaign_start_date.strftime("%Y.%m.%d_%H-%M-%S"),
        datetime.now().strftime("%Y.%m.%d_%H-%M-%S")
    ])

    workbook.close()

#######################################################################################################################
def main():
    argparser = argparse.ArgumentParser(prog="Gophish reportgen", description="Interface for human")
    argparser.add_argument("-i", "--input", type=argparse.FileType('r'), nargs='+', required=True, metavar="FILE", help="Path to gophish reports")
    argparser.add_argument("--masked-only", dest="masked_only", action='store_true', help="Add this flag if only masked passwords should be in the result file")
    argparser.add_argument("-l", "--login", action='append', metavar="LOGIN", help="Custom login field name")
    argparser.add_argument("-p", "--password", action='append', metavar="LOGIN", help="Custom login field name")
    global args
    args = argparser.parse_args()

    campaign_start_date = None

    for csvfile in args.input:
        csv_reader = csv.reader(csvfile, quotechar='"', skipinitialspace=True)
        next(csv_reader)
        for row in csv_reader:
            if "Campaign Created" in row[2]:
                if campaign_start_date is None:
                    campaign_start_date = dateparser.parse(row[1])
                else:
                    campaign_start_date = min(campaign_start_date, dateparser.parse(row[1]))

            elif "Email Sent" in row[2]:
                victims[row[0]] = {
                    'logins': set(),
                    'passwords': set(),
                    'first_submit': None,
                    'clicked': False,
                    'first_click': None,
                    'ip': None,
                    'count_attempts': 0,
                    'browser': None
                }

            elif "Clicked Link" in row[2] or "Submitted Data" in row[2]:
                parse_creds(row[0], row[1], row[2], row[3])

    write_xlsx(campaign_start_date)

#######################################################################################################################
if __name__ == "__main__":
    main()
