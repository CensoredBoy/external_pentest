import dkim
import smtplib
import email.utils
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

#######################################################################################################################
def sendemail(ip, port, from_addr, to_addrs, subject, text_data=None, html_data=None, additional_headers={}, dkim_domain=None, dkim_selector=None, dkim_private_key=None):

    if text_data is None and html_data is None:
        raise Exception("Text or HTML data is required for sending email.")

    if not html_data:
        msg = MIMEText(text_data, 'plain', 'utf-8')
    elif not text_data:
        msg = MIMEText(html_data, 'html', 'utf-8')
    else:
        msg = MIMEMultipart('alternative')
        msg.preamble = "This is a multipart message in MIME format.\n"
        msg.attach(MIMEText(text_data, 'plain', 'utf-8'))
        msg.attach(MIMEText(html_data, 'html', 'utf-8'))

    msg['From'] = from_addr
    msg['To'] = ", ".join(to_addrs)
    msg['Subject'] = subject
    msg['Date'] = email.utils.formatdate()
    msg['Thread-Topic'] = subject
    msg['X-Mailer'] = "Microsoft Outlook 16.0"
    msg['Accept-Language'] = "en-GB, ru-RU, en-US"
    msg['Content-Language'] = "ru-RU"

    for header in additional_headers:
        del msg[header]
        msg[header] = additional_headers[header]

    if dkim_domain and dkim_selector and dkim_private_key:
        sig = dkim.sign(
            message=msg.as_string().encode(),
            selector=dkim_selector.encode(),
            domain=dkim_domain.encode(),
            privkey=dkim_private_key.encode(),
            include_headers=[b"to", b"from", b"subject"],
            canonicalize=(b'relaxed', b'relaxed')
        )
        msg["DKIM-Signature"] = sig.lstrip(b"DKIM-Signature: ").decode()

    if port == 465:
        server = smtplib.SMTP_SSL(ip.compressed, port)
    else:
        server = smtplib.SMTP(ip.compressed, port)
        server.helo("example.com")

    try:
        server.sendmail(from_addr, to_addrs, msg.as_string())
    except Exception as exc:
        try:
            server.quit()
        except smtplib.SMTPServerDisconnected:
            pass
        raise exc
