import time

from celery import shared_task
from .Rpc.rpc_client import SubDomainRpcClient
from .models import Scan, IP, Domain, Port
from django.conf import settings
import nmap
import re
import pydig
from .mxservers_and_phishing.mx_check import MXServerTester, MXTesterModes

@shared_task
def osint(scan_id):
    scan = Scan.objects.get(pk=scan_id)
    r = re.compile('^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$')
    subdomains_collector = SubDomainRpcClient()
    subdomains = subdomains_collector.call(scan.main_domain)
    subdomains = subdomains.decode('utf8').split('\n')[:-1]
    if scan.main_domain not in subdomains:
        subdomains.append(scan.main_domain)
    nm = nmap.PortScanner()
    for subdomain in subdomains:
        scan_domain = Domain(domain=subdomain, scan=scan)
        scan_domain.save()

        subdomain_ips = pydig.query(subdomain, 'A')
        for subdomain_ip in subdomain_ips:
            if bool(r.match(subdomain_ip)):
                scan_domain_ip = IP(ip = subdomain_ip, t = 'A', ip_domain=scan_domain, scan=scan)
                scan_domain_ip.save()
                res = nm.scan(scan_domain_ip.ip, arguments=settings.NMAP_COMMAND)
                if res['nmap']['scanstats']['downhosts'] == '0':
                    scan_domain_ip.state = nm[scan_domain_ip.ip].state()
                    scan_domain_ip.save()
                    for protocol in nm[scan_domain_ip.ip].all_protocols():
                        for port in nm[scan_domain_ip.ip][protocol].keys():
                            name = nm[scan_domain_ip.ip][protocol][port]['name']
                            product = nm[scan_domain_ip.ip][protocol][port]['product']
                            version = nm[scan_domain_ip.ip][protocol][port]['version']
                            proto = Port(scan=scan, ip=scan_domain_ip, port=port, name=name, product=product, version=version, protocol=protocol)
                            proto.save()
                else:
                    scan_domain_ip.state = 'down'
                    scan_domain_ip.save()
    scan.done = 2
    scan.save()
    mail_tester_config = {
        "SCAN_ID": scan_id,
        "DOMAINS":[scan.main_domain]
    }
    mail_modes = MXTesterModes(False,False,False,False,False,False,False,False,False)
    mail_tester = MXServerTester(mail_tester_config, mail_modes, False)
    mail_tester.check_domain_configurations()
