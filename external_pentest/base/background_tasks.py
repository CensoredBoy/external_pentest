import time

from celery import shared_task
from celery.signals import task_success
from .Rpc.rpc_client import SubDomainRpcClient
from .models import Scan, IP, Domain, Port, Screenshot
from django.conf import settings
import nmap
import re
import pydig
from .mxservers_and_phishing.mx_check import MXServerTester, MXTesterModes
import subprocess
from os import walk
import shutil
from django.core.files.images import ImageFile
from asgiref.sync import async_to_sync
import channels.layers

@shared_task
def osint(scan_id):

    channel_layer = channels.layers.get_channel_layer()
    try:
        scan = Scan.objects.get(pk=scan_id)
        r = re.compile('^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$')
        subdomains_collector = SubDomainRpcClient()
        subdomains = subdomains_collector.call(scan.main_domain)
        subdomains = subdomains.decode('utf8').split('\n')[:-1]
        subdomains = set(subdomains)
        subdomains.add(scan.main_domain)
        
        
        nm = nmap.PortScanner()
        processed_ips = set()

        for subdomain in subdomains:
            scan_domain = Domain(domain=subdomain, scan=scan)
            scan_domain.save()
        
            subdomain_ips = pydig.query(subdomain, 'A')
            for subdomain_ip in subdomain_ips:
                if bool(r.match(subdomain_ip) and not subdomain_ip in processed_ips):
                    scan_domain_ip = IP(ip = subdomain_ip, t = 'A', ip_domain=scan_domain, scan=scan)
                    scan_domain_ip.save()
                    res = nm.scan(scan_domain_ip.ip, arguments=settings.NMAP_COMMAND)
                    if res['nmap']['scanstats']['downhosts'] == '0':
                        scan_domain_ip.state = nm[scan_domain_ip.ip].state()
                        scan_domain_ip.save()
                        for protocol in nm[scan_domain_ip.ip].all_protocols():
                            for port in nm[scan_domain_ip.ip][protocol].keys():
                                name = nm[scan_domain_ip.ip][protocol][port]['name']
                                product = nm[scan_domain_ip.ip][protocol][port]['product']
                                version = nm[scan_domain_ip.ip][protocol][port]['version']
                                proto = Port(scan=scan, ip=scan_domain_ip, port=port, name=name, product=product, version=version, protocol=protocol)
                                proto.save()
                    else:
                        scan_domain_ip.state = 'down'
                        scan_domain_ip.save()
                    processed_ips.add(subdomain_ip)

        mail_tester_config = {
            "SCAN_ID": scan_id,
            "DOMAINS":[scan.main_domain]
        }
        mail_modes = MXTesterModes(False,False,False,False,False,False,False,False,False)
        mail_tester = MXServerTester(mail_tester_config, mail_modes, False)
        mail_tester.check_domain_configurations()
        
        aquatone_results_path = f'{settings.AQUATONE_SCANS_DIR}/scan_{scan.pk}'

        command = [
               settings.AQUATONE_PATH,
               "-chrome-path",
               settings.AQUATONE_CHROMIUM,
               "-screenshot-timeout",
               str(settings.AQUATONE_SCREENSHOT_TIMEOUT),
               "-out",
               aquatone_results_path,
           ]
        target_list = "\n".join(subdomains)
        subprocess.run(command, input=target_list.encode())

        screenshots = []

        for (dirpath, dirnames, filenames) in walk(f'{aquatone_results_path}/screenshots'):
            screenshots.extend(filenames)

        processed_filenames = set()
        for filename in screenshots:
            screen_domain = filename.split('__')[1].replace('_', '.')
            if not screen_domain in processed_filenames:
                with open(f'{aquatone_results_path}/screenshots/{filename}', 'rb') as screenshot:
                    models_filename = screen_domain.replace('.','_')
                    django_image = ImageFile(file=screenshot, name=f'{models_filename}_{scan.pk}.png')
                    domain = Domain.objects.filter(scan=scan, domain=screen_domain)[0]
                    file = Screenshot(screenshot=django_image, screen_domain=domain, scan=scan)
                    file.save()

            processed_filenames.add(screen_domain)

        shutil.rmtree(aquatone_results_path)

        scan.done = 2
        scan.save()

        async_to_sync(channel_layer.group_send)(f"scan_loading_group_name_{scan.pk}", {"type":"scan_done", "status":"DONE"})
    except Exception as e:
        print("--------------------------------------------------------------------")
        if settings.DEBUG:
            async_to_sync(channel_layer.group_send)(f"scan_loading_group_name_{scan.pk}", {"type":"scan_error", "status":"ERROR", "message":str(e)})
        else:
            async_to_sync(channel_layer.group_send)(f"scan_loading_group_name_{scan.pk}", {"type":"scan_error", "status":"ERROR", "message":"some error"})
        


'''
@task_success.connect(sender=add)
def task_add_succeed(sender=None, **kwargs):
    print("SUCCEEEEEEEEEEEEEEEEEEED")
'''







